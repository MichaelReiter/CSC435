package ir;

import ast.AddExpression;
import ast.ArrayAssignmentStatement;
import ast.ArrayReference;
import ast.ArrayReferenceExpression;
import ast.AssignmentStatement;
import ast.Block;
import ast.BooleanLiteral;
import ast.CharacterLiteral;
import ast.Declaration;
import ast.EmptyStatement;
import ast.EqualityExpression;
import ast.Expression;
import ast.ExpressionList;
import ast.ExpressionStatement;
import ast.FloatLiteral;
import ast.FormalParameters;
import ast.Function;
import ast.FunctionBody;
import ast.FunctionCall;
import ast.FunctionDeclaration;
import ast.Identifier;
import ast.IdentifierExpression;
import ast.IfElseStatement;
import ast.IfStatement;
import ast.IntegerLiteral;
import ast.LessThanExpression;
import ast.MultiplyExpression;
import ast.ParenthesisExpression;
import ast.PrintlnStatement;
import ast.PrintStatement;
import ast.Program;
import ast.ReturnStatement;
import ast.StatementList;
import ast.StringLiteral;
import ast.SubtractExpression;
import ast.TypeNode;
import ast.VariableDeclaration;
import ast.Visitor;
import ast.WhileStatement;
import type.ArrayType;

public interface TempVisitor {
    public Temp visit(AddExpression e);
    public Temp visit(ArrayAssignmentStatement s);
    public Temp visit(ArrayReference a);
    public Temp visit(ArrayReferenceExpression a);
    public Temp visit(ArrayType a);
    public Temp visit(AssignmentStatement a);
    public Temp visit(Block b);
    public Temp visit(BooleanLiteral b);
    public Temp visit(CharacterLiteral c);
    public Temp visit(Declaration d);
    public Temp visit(EmptyStatement e);
    public Temp visit(EqualityExpression e);
    public Temp visit(ExpressionList e);
    public Temp visit(ExpressionStatement e);
    public Temp visit(FloatLiteral f);
    public Temp visit(FormalParameters p);
    public Temp visit(Function f);
    public Temp visit(FunctionBody f);
    public Temp visit(FunctionCall f);
    public Temp visit(FunctionDeclaration f);
    public Temp visit(Identifier i);
    public Temp visit(IdentifierExpression i);
    public Temp visit(IfElseStatement i);
    public Temp visit(IfStatement i);
    public Temp visit(IntegerLiteral i);
    public Temp visit(LessThanExpression e);
    public Temp visit(MultiplyExpression e);
    public Temp visit(ParenthesisExpression p);
    public Temp visit(PrintlnStatement s);
    public Temp visit(PrintStatement s);
    public Temp visit(Program p);
    public Temp visit(ReturnStatement s);
    public Temp visit(StatementList sl);
    public Temp visit(StringLiteral s);
    public Temp visit(SubtractExpression e);
    public Temp visit(Type t);
    public Temp visit(TypeNode t);
    public Temp visit(VariableDeclaration v);
    public Temp visit(WhileStatement s);
}
